# Builds new Docker images of services and updates helm chart values

name: Services CI

on:
  push:
    branches:
      - main
    paths:
      - services/**

  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  DOCKER_REGISTRY: 767534018423.dkr.ecr.us-east-1.amazonaws.com

jobs:
  build_services_json:
    name: Define Services
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.find-services.outputs.services }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup environment
        run: |
          export 
          pip install \
            pyyaml==6.0 \
            semver==2.13.0
      - id: find-services
        name: Find Services
        uses: jannekem/run-python-script-action@v1.2
        with:
          script: |
            import yaml
            import json
            
            with open("services/docker-compose.yml") as f:
              compose = yaml.safe_load(f.read())

            service_names = list(compose['services'].keys())
            print(f"Found services: {service_names}")
            print(f'::set-output name=services::{json.dumps(service_names)}')

  build:
    name: Build Services
    runs-on: ubuntu-latest
    needs:
      - build_services_json
    strategy:
      matrix:
        service: ${{fromJSON(needs.build_services_json.outputs.services)}}
    steps:
      - uses: actions/checkout@v2
      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
          cache: pip
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Setup environment
        run: |
          export 
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $DOCKER_REGISTRY
          pip install \
            pyyaml==6.0 \
            semver==2.13.0 \
            boto3==1.20.43
          python3 
      - id: define_version
        name: Define version
        uses: jannekem/run-python-script-action@v1.2
        with:
          script: |
            # Define the new version number
            import yaml
            import semver
            with open("services/docker-compose.yml") as f:
              compose = yaml.safe_load(f.read())
            image_tag = compose['services']['${{ matrix.service }}']['image'].split('/')[1].split(':')[1]
            new_version = semver.VersionInfo.parse(image_tag).bump_patch()
            print(f'New version number: {new_version}')
            print(f'::set-output name=new_version::{new_version}')
      - name: Run unit tests
        run: |
          # TODO: If the image SHA is the same as before, the rest of this job should be skipped
          echo "Running unit tests for ${{ matrix.service }}"
          cd services/${{ matrix.service }}
          DOCKER_BUILDKIT=1 docker build --target export-test-results --output type=local,dest=reports .
          sed -i'.bak' -e 's/\/app\/src/src/g' reports/coverage.xml

          cat reports/coverage.xml
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        with:
          projectBaseDir: "services/${{ matrix.service }}"
          args: >
            -Dsonar.organization=phclark
            -Dsonar.projectKey="phclark_k8s-demo_${{ matrix.service }}"
            -Dsonar.projectVersion="${{ steps.define_version.outputs.new_version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Create ECR
        uses: jannekem/run-python-script-action@v1.2
        with:
          script: |
            import boto3
            ecr = boto3.client('ecr')
            response = ecr.describe_repositories()
            repositories = [ r['repositoryName'] for r in response['repositories'] ]
            
            if "${{ matrix.service }}" not in repositories:
              ecr.create_repository(repositoryName=image_name)
      - name: Update image tags in charts
        uses: jannekem/run-python-script-action@v1.2
        with:
          script: |
            # Update image tag in docker-compose and root chart values file
            import yaml
            import semver
            with open("services/docker-compose.yml") as f:
              compose = yaml.safe_load(f.read())

            repository = compose['services']['${{ matrix.service }}']['image'].split('/')[0]
            image_name = compose['services']['${{ matrix.service }}']['image'].split('/')[1].split(':')[0]
            new_version = "${{ steps.define_version.outputs.new_version }}"
            compose['services']['${{ matrix.service }}']['image'] = f"{repository}/{image_name}:{new_version}"

            with open("services/docker-compose.yml", "w") as f:
              f.write(yaml.dump(compose))

            with open(f"charts/${{ matrix.service }}/values.yaml") as f:
                chart_values = yaml.safe_load(f.read())
            
            chart_values['image']['tag'] = str(new_version)

            with open(f"charts/${{ matrix.service }}/values.yaml", "w") as f:
              f.write(yaml.dump(chart_values))
      - name: Build images
        working-directory: services
        run: |
          # Unit tests are performed as part of the Docker build
          docker-compose build ${{ matrix.service }}
      - name: Push images
        working-directory: services
        run: |
          docker-compose push ${{ matrix.service }}
      - name: Commit files
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add charts
          git add services
          git status
          git commit -m "Update chart image versions"
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
